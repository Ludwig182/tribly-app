// src/services/storageService.js - Version temporaire avec d√©tection Spark Plan
import { 
  ref, 
  uploadBytes, 
  getDownloadURL, 
  deleteObject,
  uploadBytesResumable 
} from 'firebase/storage';
import { storage } from '../config/firebase';
import { familyService } from './familyService';

export const storageService = {
  
  // üîç V√©rifier si Firebase Storage est disponible
  async checkStorageAvailability() {
    try {
      const testRef = ref(storage, 'test-availability');
      console.log('‚úÖ Storage disponible, r√©f√©rence cr√©√©e');
      return true;
    } catch (error) {
      console.log('‚ùå Storage non disponible:', error.code);
      if (error.code === 'storage/unknown') {
        console.log('üí° Probable: Plan Spark - Storage n√©cessite plan Blaze');
      }
      return false;
    }
  },

  /**
   * üìÅ Structure des chemins Firebase Storage :
   * /avatars/{familyId}/{memberId}/profile.jpg
   */
  
  // üéØ G√©n√®re le chemin de stockage pour un avatar
  getAvatarPath(familyId, memberId) {
    return `avatars/${familyId}/${memberId}/profile.jpg`;
  },

  // üì§ Upload d'un avatar avec optimisation et v√©rification disponibilit√©
  async uploadAvatar(familyId, memberId, imageUri, onProgress = null) {
    try {
      console.log('üîÑ D√©but upload avatar:', { familyId, memberId });
      
      // 0. V√©rifier que Storage est disponible
      const storageAvailable = await this.checkStorageAvailability();
      if (!storageAvailable) {
        throw new Error(
          'üö® Firebase Storage non disponible.\n\n' +
          'Ton projet Firebase est sur le plan Spark (gratuit).\n' +
          'Les photos de profil n√©cessitent le plan Blaze.\n\n' +
          'üí° Solutions :\n' +
          '‚Ä¢ Activer plan Blaze (gratuit jusqu\'√† 5GB)\n' +
          '‚Ä¢ Utiliser les emojis pour l\'instant'
        );
      }
      
      // 1. Optimiser l'image avant upload
      const { imageOptimizationService } = await import('./imageOptimizationService');
      const optimizedImage = await imageOptimizationService.optimizeAvatar(imageUri);
      
      if (optimizedImage.error) {
        console.warn('‚ö†Ô∏è Optimisation √©chou√©e, utilisation image originale');
      } else {
        console.log(`‚úÖ Image optimis√©e: ${optimizedImage.compressionRatio}% de r√©duction`);
      }
      
      // 2. Pr√©parer l'image optimis√©e
      const finalImageUri = optimizedImage.error ? imageUri : optimizedImage.uri;
      const response = await fetch(finalImageUri);
      const blob = await response.blob();
      
      // 3. V√©rifier la taille finale (apr√®s optimisation)
      if (blob.size > 5 * 1024 * 1024) {
        throw new Error(`Image trop volumineuse apr√®s optimisation: ${(blob.size / 1024 / 1024).toFixed(1)}MB (max 5MB)`);
      }
      
      console.log(`üìä Taille finale: ${(blob.size / 1024).toFixed(1)}KB`);
      
      // 4. Cr√©er la r√©f√©rence Firebase
      const avatarPath = this.getAvatarPath(familyId, memberId);
      const storageRef = ref(storage, avatarPath);
      
      // 5. Upload avec progression
      const uploadTask = uploadBytesResumable(storageRef, blob, {
        contentType: blob.type || 'image/jpeg',
        customMetadata: {
          uploadedBy: memberId,
          uploadedAt: new Date().toISOString(),
          originalSize: blob.size.toString()
        }
      });
      
      // 6. Monitoring progression
      if (onProgress) {
        uploadTask.on('state_changed', (snapshot) => {
          const progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;
          onProgress(progress);
        });
      }
      
      // 7. Attendre completion
      await uploadTask;
      
      // 8. R√©cup√©rer URL de t√©l√©chargement
      const downloadURL = await getDownloadURL(storageRef);
      
      // 9. Mettre √† jour le profil membre dans Firestore
      await this.updateMemberAvatar(familyId, memberId, downloadURL);
      
      console.log('‚úÖ Avatar upload√© avec succ√®s:', downloadURL);
      return downloadURL;
      
    } catch (error) {
      console.error('‚ùå Erreur upload avatar:', error);
      throw this.handleStorageError(error);
    }
  },

  // üîó R√©cup√®re l'URL d'un avatar (avec cache)
  async getAvatarUrl(familyId, memberId) {
    try {
      const avatarPath = this.getAvatarPath(familyId, memberId);
      const storageRef = ref(storage, avatarPath);
      
      const downloadURL = await getDownloadURL(storageRef);
      return downloadURL;
      
    } catch (error) {
      // Si l'avatar n'existe pas, retourner null (fallback emoji)
      if (error.code === 'storage/object-not-found') {
        return null;
      }
      throw this.handleStorageError(error);
    }
  },

  // üóëÔ∏è Supprime un avatar existant
  async deleteAvatar(familyId, memberId) {
    try {
      const avatarPath = this.getAvatarPath(familyId, memberId);
      const storageRef = ref(storage, avatarPath);
      
      await deleteObject(storageRef);
      
      // Supprimer l'URL du profil membre
      await this.updateMemberAvatar(familyId, memberId, null);
      
      console.log('‚úÖ Avatar supprim√© avec succ√®s');
      return true;
      
    } catch (error) {
      if (error.code === 'storage/object-not-found') {
        console.log('‚ö†Ô∏è Avatar d√©j√† supprim√© ou inexistant');
        return true;
      }
      throw this.handleStorageError(error);
    }
  },

  // üîÑ Met √† jour l'URL de l'avatar dans le profil membre
  async updateMemberAvatar(familyId, memberId, avatarUrl) {
    try {
      const family = await familyService.getFamily(familyId);
      
      const updatedMembers = family.members.map(member => {
        if (member.id === memberId) {
          return {
            ...member,
            avatar: member.avatar, // Garder l'emoji de fallback
            avatarUrl: avatarUrl,  // Ajouter l'URL de la photo
            avatarUpdatedAt: avatarUrl ? new Date().toISOString() : null
          };
        }
        return member;
      });
      
      await familyService.updateFamily(familyId, { 
        members: updatedMembers 
      });
      
    } catch (error) {
      console.error('‚ùå Erreur mise √† jour avatar membre:', error);
      throw error;
    }
  },

  // üìä Statistiques storage famille (pour debug/admin)
  async getFamilyStorageStats(familyId) {
    try {
      const family = await familyService.getFamily(familyId);
      const stats = {
        totalMembers: family.members.length,
        membersWithAvatar: 0,
        membersWithoutAvatar: 0
      };
      
      for (const member of family.members) {
        if (member.avatarUrl) {
          stats.membersWithAvatar++;
        } else {
          stats.membersWithoutAvatar++;
        }
      }
      
      return stats;
      
    } catch (error) {
      console.error('‚ùå Erreur stats storage:', error);
      return null;
    }
  },

  // üõ†Ô∏è Gestion centralis√©e des erreurs Storage avec messages user-friendly
  handleStorageError(error) {
    // Messages d'erreur plus user-friendly
    const errorMap = {
      'storage/unauthorized': 'Permissions insuffisantes pour acc√©der au stockage',
      'storage/canceled': 'Upload annul√© par l\'utilisateur',
      'storage/unknown': 'üö® Firebase Storage non disponible\n\nTon projet est sur le plan Spark (gratuit).\nLes photos n√©cessitent le plan Blaze.\n\nüí° Active le plan Blaze (gratuit jusqu\'√† 5GB) ou utilise les emojis.',
      'storage/object-not-found': 'Fichier introuvable',
      'storage/bucket-not-found': 'Espace de stockage introuvable',
      'storage/quota-exceeded': 'Quota de stockage d√©pass√©',
      'storage/unauthenticated': 'Utilisateur non authentifi√©',
      'storage/retry-limit-exceeded': 'Trop de tentatives, r√©essayez plus tard'
    };
    
    const friendlyMessage = errorMap[error.code] || error.message || `Erreur de stockage: ${error.message}`;
    
    return new Error(friendlyMessage);
  },

  // üîß Utilitaires pour les formats d'image
  validateImageFormat(uri) {
    const supportedFormats = ['.jpg', '.jpeg', '.png', '.webp'];
    const lowerUri = uri.toLowerCase();
    
    return supportedFormats.some(format => 
      lowerUri.includes(format)
    );
  },

  // üìè Calcule la taille d'affichage optimale
  getOptimalDisplaySize(containerWidth, originalWidth, originalHeight) {
    const aspectRatio = originalHeight / originalWidth;
    const displayWidth = Math.min(containerWidth, 400);
    const displayHeight = displayWidth * aspectRatio;
    
    return {
      width: displayWidth,
      height: displayHeight
    };
  }
};